{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"isAsync":false}},{"name":"@babel/runtime/helpers/defineProperty","data":{"isAsync":false}},{"name":"@babel/runtime/helpers/classCallCheck","data":{"isAsync":false}},{"name":"@babel/runtime/helpers/createClass","data":{"isAsync":false}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = void 0;\n\n  var _defineProperty2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1], \"@babel/runtime/helpers/defineProperty\"));\n\n  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2], \"@babel/runtime/helpers/classCallCheck\"));\n\n  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3], \"@babel/runtime/helpers/createClass\"));\n\n  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\n  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n  var TextExtraction = function () {\n    function TextExtraction(text, patterns) {\n      (0, _classCallCheck2.default)(this, TextExtraction);\n      this.text = text;\n      this.patterns = patterns || [];\n    }\n\n    (0, _createClass2.default)(TextExtraction, [{\n      key: \"parse\",\n      value: function parse() {\n        var _this = this;\n\n        var parsedTexts = [{\n          children: this.text\n        }];\n        this.patterns.forEach(function (pattern) {\n          var newParts = [];\n          parsedTexts.forEach(function (parsedText) {\n            if (parsedText._matched) {\n              newParts.push(parsedText);\n              return;\n            }\n\n            var parts = [];\n            var textLeft = parsedText.children;\n\n            while (textLeft) {\n              var matches = pattern.pattern.exec(textLeft);\n\n              if (!matches) {\n                break;\n              }\n\n              var previousText = textLeft.substr(0, matches.index);\n              parts.push({\n                children: previousText\n              });\n              parts.push(_this.getMatchedPart(pattern, matches[0], matches));\n              textLeft = textLeft.substr(matches.index + matches[0].length);\n            }\n\n            parts.push({\n              children: textLeft\n            });\n            newParts.push.apply(newParts, parts);\n          });\n          parsedTexts = newParts;\n        });\n        parsedTexts.forEach(function (parsedText) {\n          return delete parsedText._matched;\n        });\n        return parsedTexts.filter(function (t) {\n          return !!t.children;\n        });\n      }\n    }, {\n      key: \"getMatchedPart\",\n      value: function getMatchedPart(matchedPattern, text, matches) {\n        var props = {};\n        Object.keys(matchedPattern).forEach(function (key) {\n          if (key === 'pattern' || key === 'renderText') {\n            return;\n          }\n\n          if (typeof matchedPattern[key] === 'function') {\n            props[key] = function () {\n              return matchedPattern[key](text);\n            };\n          } else {\n            props[key] = matchedPattern[key];\n          }\n        });\n        var children = text;\n\n        if (matchedPattern.renderText && typeof matchedPattern.renderText === 'function') {\n          children = matchedPattern.renderText(text, matches);\n        }\n\n        return _objectSpread({}, props, {\n          children: children,\n          _matched: true\n        });\n      }\n    }]);\n    return TextExtraction;\n  }();\n\n  var _default = TextExtraction;\n  exports.default = _default;\n});","map":[[19,6,1,6,"TextExtraction"],[19,20],[20,0,8,2],[20,28,8,14,"text"],[20,32,8,2],[20,34,8,20,"patterns"],[20,42,8,2],[20,44,8,30],[21,0,8,30],[22,0,9,4],[22,11,9,9,"text"],[22,15,9,4],[22,18,9,20,"text"],[22,22,9,4],[23,0,10,4],[23,11,10,9,"patterns"],[23,19,10,4],[23,22,10,20,"patterns"],[23,30,10,28],[23,34,10,32],[23,36,10,4],[24,0,11,3],[28,30,17,10],[29,0,17,10],[31,0,18,4],[31,12,18,8,"parsedTexts"],[31,23,18,19],[31,26,18,22],[31,27,18,23],[32,0,18,24,"children"],[32,10,18,24,"children"],[32,18,18,32],[32,20,18,34],[32,25,18,39,"text"],[33,0,18,23],[33,9,18,22],[33,10,18,4],[34,0,19,4],[34,13,19,9,"patterns"],[34,21,19,4],[34,22,19,18,"forEach"],[34,29,19,4],[34,30,19,26],[34,40,19,27,"pattern"],[34,47,19,26],[34,49,19,39],[35,0,20,6],[35,14,20,10,"newParts"],[35,22,20,18],[35,25,20,21],[35,27,20,6],[36,0,22,6,"parsedTexts"],[36,10,22,6,"parsedTexts"],[36,21,22,17],[36,22,22,18,"forEach"],[36,29,22,6],[36,30,22,26],[36,40,22,27,"parsedText"],[36,50,22,26],[36,52,22,42],[37,0,24,8],[37,16,24,12,"parsedText"],[37,26,24,22],[37,27,24,23,"_matched"],[37,35,24,8],[37,37,24,33],[38,0,25,10,"newParts"],[38,14,25,10,"newParts"],[38,22,25,18],[38,23,25,19,"push"],[38,27,25,10],[38,28,25,24,"parsedText"],[38,38,25,10],[39,0,27,10],[40,0,28,9],[42,0,30,8],[42,16,30,12,"parts"],[42,21,30,17],[42,24,30,23],[42,26,30,8],[43,0,31,8],[43,16,31,12,"textLeft"],[43,24,31,20],[43,27,31,23,"parsedText"],[43,37,31,33],[43,38,31,34,"children"],[43,46,31,8],[45,0,33,8],[45,19,33,15,"textLeft"],[45,27,33,8],[45,29,33,25],[46,0,34,10],[46,18,34,14,"matches"],[46,25,34,21],[46,28,34,24,"pattern"],[46,35,34,31],[46,36,34,32,"pattern"],[46,43,34,24],[46,44,34,40,"exec"],[46,48,34,24],[46,49,34,45,"textLeft"],[46,57,34,24],[46,58,34,10],[48,0,36,10],[48,18,36,14],[48,19,36,15,"matches"],[48,26,36,10],[48,28,36,24],[49,0,36,26],[50,0,36,34],[52,0,38,10],[52,18,38,14,"previousText"],[52,30,38,26],[52,33,38,29,"textLeft"],[52,41,38,37],[52,42,38,38,"substr"],[52,48,38,29],[52,49,38,45],[52,50,38,29],[52,52,38,48,"matches"],[52,59,38,55],[52,60,38,56,"index"],[52,65,38,29],[52,66,38,10],[53,0,40,10,"parts"],[53,14,40,10,"parts"],[53,19,40,15],[53,20,40,16,"push"],[53,24,40,10],[53,25,40,21],[54,0,40,22,"children"],[54,16,40,22,"children"],[54,24,40,30],[54,26,40,32,"previousText"],[55,0,40,21],[55,15,40,10],[56,0,42,10,"parts"],[56,14,42,10,"parts"],[56,19,42,15],[56,20,42,16,"push"],[56,24,42,10],[56,25,42,21],[56,30,42,25],[56,31,42,26,"getMatchedPart"],[56,45,42,21],[56,46,42,41,"pattern"],[56,53,42,21],[56,55,42,50,"matches"],[56,62,42,57],[56,63,42,58],[56,64,42,57],[56,65,42,21],[56,67,42,62,"matches"],[56,74,42,21],[56,75,42,10],[57,0,44,10,"textLeft"],[57,14,44,10,"textLeft"],[57,22,44,18],[57,25,44,21,"textLeft"],[57,33,44,29],[57,34,44,30,"substr"],[57,40,44,21],[57,41,44,37,"matches"],[57,48,44,44],[57,49,44,45,"index"],[57,54,44,37],[57,57,44,53,"matches"],[57,64,44,60],[57,65,44,61],[57,66,44,60],[57,67,44,53],[57,68,44,64,"length"],[57,74,44,21],[57,75,44,10],[58,0,45,9],[60,0,47,8,"parts"],[60,12,47,8,"parts"],[60,17,47,13],[60,18,47,14,"push"],[60,22,47,8],[60,23,47,19],[61,0,47,20,"children"],[61,14,47,20,"children"],[61,22,47,28],[61,24,47,30,"textLeft"],[62,0,47,19],[62,13,47,8],[63,0,49,8,"newParts"],[63,12,49,8,"newParts"],[63,20,49,16],[63,21,49,17,"push"],[63,25,49,8],[63,32,49,8,"newParts"],[63,40,49,16],[63,42,49,25,"parts"],[63,47,49,16],[63,48,49,8],[64,0,50,7],[64,11,22,6],[65,0,52,6,"parsedTexts"],[65,10,52,6,"parsedTexts"],[65,21,52,17],[65,24,52,20,"newParts"],[65,32,52,6],[66,0,53,5],[66,9,19,4],[67,0,56,4,"parsedTexts"],[67,8,56,4,"parsedTexts"],[67,19,56,15],[67,20,56,16,"forEach"],[67,27,56,4],[67,28,56,24],[67,38,56,25,"parsedText"],[67,48,56,24],[68,0,56,24],[68,17,56,40],[68,24,56,47,"parsedText"],[68,34,56,57],[68,35,56,58,"_matched"],[68,43,56,24],[69,0,56,24],[69,9,56,4],[70,0,58,4],[70,15,58,11,"parsedTexts"],[70,26,58,22],[70,27,58,23,"filter"],[70,33,58,11],[70,34,58,30],[70,44,58,30,"t"],[70,45,58,31],[71,0,58,31],[71,17,58,35],[71,18,58,36],[71,19,58,37,"t"],[71,20,58,38],[71,21,58,39,"children"],[71,29,58,31],[72,0,58,31],[72,9,58,11],[72,10,58,4],[73,0,59,3],[76,37,70,17,"matchedPattern"],[76,51],[76,53,70,33,"text"],[76,57],[76,59,70,39,"matches"],[76,66],[76,68,70,48],[77,0,71,4],[77,12,71,8,"props"],[77,17,71,13],[77,20,71,16],[77,22,71,4],[78,0,73,4,"Object"],[78,8,73,4,"Object"],[78,14,73,10],[78,15,73,11,"keys"],[78,19,73,4],[78,20,73,16,"matchedPattern"],[78,34,73,4],[78,36,73,32,"forEach"],[78,43,73,4],[78,44,73,40],[78,54,73,41,"key"],[78,57,73,40],[78,59,73,49],[79,0,74,6],[79,14,74,10,"key"],[79,17,74,13],[79,22,74,18],[79,31,74,10],[79,35,74,31,"key"],[79,38,74,34],[79,43,74,39],[79,55,74,6],[79,57,74,53],[80,0,74,55],[81,0,74,64],[83,0,76,6],[83,14,76,10],[83,21,76,17,"matchedPattern"],[83,35,76,31],[83,36,76,32,"key"],[83,39,76,31],[83,40,76,10],[83,45,76,41],[83,55,76,6],[83,57,76,53],[84,0,77,8,"props"],[84,12,77,8,"props"],[84,17,77,13],[84,18,77,14,"key"],[84,21,77,13],[84,22,77,8],[84,25,77,21],[85,0,77,21],[85,21,77,27,"matchedPattern"],[85,35,77,41],[85,36,77,42,"key"],[85,39,77,41],[85,40,77,27],[85,41,77,47,"text"],[85,45,77,27],[85,46,77,21],[86,0,77,21],[86,13,77,8],[87,0,78,7],[87,11,76,6],[87,17,78,13],[88,0,79,8,"props"],[88,12,79,8,"props"],[88,17,79,13],[88,18,79,14,"key"],[88,21,79,13],[88,22,79,8],[88,25,79,21,"matchedPattern"],[88,39,79,35],[88,40,79,36,"key"],[88,43,79,35],[88,44,79,8],[89,0,80,7],[90,0,81,5],[90,9,73,4],[91,0,83,4],[91,12,83,8,"children"],[91,20,83,16],[91,23,83,19,"text"],[91,27,83,4],[93,0,84,4],[93,12,84,8,"matchedPattern"],[93,26,84,22],[93,27,84,23,"renderText"],[93,37,84,8],[93,41,84,37],[93,48,84,44,"matchedPattern"],[93,62,84,58],[93,63,84,59,"renderText"],[93,73,84,37],[93,78,84,74],[93,88,84,4],[93,90,84,86],[94,0,85,6,"children"],[94,10,85,6,"children"],[94,18,85,14],[94,21,85,17,"matchedPattern"],[94,35,85,31],[94,36,85,32,"renderText"],[94,46,85,17],[94,47,85,43,"text"],[94,51,85,17],[94,53,85,49,"matches"],[94,60,85,17],[94,61,85,6],[95,0,86,5],[97,0,88,4],[97,33,89,9,"props"],[97,38,88,4],[98,0,90,6,"children"],[98,10,90,6,"children"],[98,18,90,14],[98,20,90,16,"children"],[98,28,88,4],[99,0,91,6,"_matched"],[99,10,91,6,"_matched"],[99,18,91,14],[99,20,91,16],[100,0,88,4],[101,0,93,3],[106,17,96,15,"TextExtraction"],[106,31]]},"type":"js/module"}]}